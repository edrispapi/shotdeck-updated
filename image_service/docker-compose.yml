services:
  # Postgres 17 — the single canonical DB for image_service.
  # This service holds the migrated data and is the DB the app should use.
  image-db:
    image: postgres:17
    container_name: image-db
    environment:
      - POSTGRES_DB=image_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=image_password
    volumes:
      - image_postgres_17_data:/var/lib/postgresql/data
    networks:
      - shotdeck_platform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d image_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  image_service:
    build: .
    container_name: image_service
    environment:
      - DATABASE_URL=postgresql://postgres:image_password@image-db:5432/image_db
      - DB_NAME=image_db
      - DB_USER=postgres
      - DB_PASSWORD=image_password
      - DB_HOST=image-db
      - DB_PORT=5432
      - USE_POSTGRESQL=1
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - DEBUG=True
      - ALLOWED_HOSTS=*
      # Kafka Configuration for deck_search integration
      - KAFKA_ENABLED=True
      - KAFKA_BOOTSTRAP_SERVERS=kafka-1:29092,kafka-2:29092,kafka-3:29092
      # S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_STORAGE_BUCKET_NAME=shotdeck-image-service
      - AWS_S3_REGION_NAME=us-east-1
      # Service-specific S3 buckets
      - IMAGE_SERVICE_BUCKET=shotdeck-image-service
      - SEARCH_SERVICE_BUCKET=shotdeck-search-service
      - DECK_SERVICE_BUCKET=shotdeck-deck-service
    volumes:
      - .:/service
      - /home/a/Desktop/shotdeck:/host_data:ro
      - /home/a/shotdeck-main/image_service/media:/service/media:rw
    ports:
      - "51009:8000"
    depends_on:
      # By default the service still depends on the old DB for safety. After
      # you've migrated data and switched DB_HOST to `image-db` you can update
      # this to depend on `image-db` instead.
      image-db:
        condition: service_healthy
    networks:
      - shotdeck_platform_network
    # command: python manage.py runserver 0.0.0.0:8000  # کامنت: ENTRYPOINT در Dockerfile مدیریت می‌کنه
    healthcheck: # اضافه: برای چک سلامت service (اختیاری)
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:8000/api/schema/swagger-ui/ || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  image_postgres_data:
  image_postgres_17_data:

networks:
  shotdeck_platform_network:
    external: true
